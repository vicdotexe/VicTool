using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using C1.WPF;
using Kucoin.Net.SymbolOrderBooks;
using VicTool.Annotations;
using VicTool.Main;
using VicTool.Main.Kucoin;
using Xceed.Wpf.Toolkit;

namespace VicTool.Controls
{
    /// <summary>
    /// Interaction logic for KucoinControl.xaml
    /// </summary>
    public partial class KucoinOrderBook : UserControl
    {
        private KucoinManager _kManager;
        private AggregatedOrderBook _orderBook;
        private List<string> _assets = new List<string>();
        private Binding _tempBinding;
        private Dictionary<string, Binding> _bindings = new Dictionary<string, Binding>();

        private Binding GetBinding(string propertyName, string format)
        {
            var name = propertyName + format;

            if (_bindings.ContainsKey(name))
                return _bindings[name];
            else
            {
                var binding = new Binding(propertyName) { StringFormat = format };
                _bindings.Add(name, binding);
                return binding;
            }
        }

        private int _priceDecimals = 4;
        public int PriceDecimals
        {
            get => _priceDecimals;
            set
            {
                _priceDecimals = value;
                OnPropertyChanged();
                //dataGridAsks.AutoGenerateColumns = false;
                //dataGridAsks.AutoGenerateColumns = true;
                //dataGridBids.AutoGenerateColumns = false;
                //dataGridBids.AutoGenerateColumns = true;
                //DataGrid_AutoGeneratedColumns();
            }
        }

        private int _qtyDecimals = 4;
        public int QtyDecimals
        {
            get => _qtyDecimals;
            set
            {
                _qtyDecimals = value;
                OnPropertyChanged();
                //dataGridAsks.AutoGenerateColumns = false;
                //dataGridAsks.AutoGenerateColumns = true;
                //dataGridBids.AutoGenerateColumns = false;
                //dataGridBids.AutoGenerateColumns = true;
                //DataGrid_AutoGeneratedColumns();
            }
        }

        private string _currentPair = "SOUL-USDT";

        public string CurrentPair
        {
            get => _currentPair;
            set
            {
                _currentPair = value;
                _orderBook.SetPair(value);
                OnPropertyChanged();
            }
        }

        private bool _symbolIsExternal;

        public bool SymbolIsExternal
        {
            get => _symbolIsExternal;
            set
            {
                _symbolIsExternal = value;
                comboBoxAsset.IsEnabled = !value;
                OnPropertyChanged();
            }
        }

        public decimal LastPrice
        {
            get => _lastPrice;
            set
            {
                _lastPrice = value;
                OnPropertyChanged();
            }
        }
        private decimal _lastPrice;

        public KucoinOrderBook()
        {
            
            InitializeComponent();
            Initialize(); 

        }


        private void Initialize()
        {
            if (DesignerProperties.GetIsInDesignMode(this))
                return;

            DataContext = this;
            _assets.Add("SOUL-USDT");
            _assets.Add("BNB-USDT");
            _assets.Add("SWINGBY-USDT");


            comboBoxAsset.ItemsSource = _assets;
            comboBoxAsset.DataContext = this;
            dataGridAsks.CanUserAddRows = false;
            dataGridBids.CanUserAddRows = false;
            intUpDownDecimals.DataContext = this;
            intUpDownQtyDecimals.DataContext = this;
            textBlockLastPrice.DataContext = this;

            _orderBook = new AggregatedOrderBook(_currentPair);
            Core.Kucoin.MainOrderBook = _orderBook;

            _kManager = new KucoinManager();
            _kManager.Initialize();
            Core.OnUiTick += OnUiRefreshed;
            dataGridAsks.AutoGeneratingColumn += DataGrid_AutoGeneratingColumn;
            dataGridBids.AutoGeneratingColumn += DataGrid_AutoGeneratingColumn;
        }

        private void DataGrid_AutoGeneratedColumns()
        {
            if (dataGridAsks.Columns.Count != 3 || dataGridBids.Columns.Count != 3)
                return;
            Style s = new Style();
            s.Setters.Add(new Setter(TextBox.TextAlignmentProperty, TextAlignment.Right));

            Style sg = new Style();
            sg.Setters.Add(new Setter(TextBox.ForegroundProperty, Brushes.MediumSeaGreen));//new BrushConverter().ConvertFromString("#FF6BC7C2")));
            //sg.Setters.Add(new Setter(TextBox.TextAlignmentProperty, TextAlignment.Right));

            Style sr = new Style();
            sr.Setters.Add(new Setter(TextBox.ForegroundProperty, Brushes.IndianRed));//new BrushConverter().ConvertFromString("#FFFF907C")));

            //dataGridBids.Columns[0].DisplayIndex = 2;
            //dataGridBids.Columns[2].DisplayIndex = 0;

            dataGridBids.Columns[1].CellStyle = s;
            dataGridBids.Columns[2].CellStyle = s;
            dataGridBids.Columns[0].CellStyle = sg;

            dataGridAsks.Columns[1].CellStyle = s;
            dataGridAsks.Columns[2].CellStyle = s;
            dataGridAsks.Columns[0].CellStyle = sr;
        }

        private void OnUiRefreshed(object sender, EventArgs e)
        {
            LastPrice = Core.Kucoin.GetPriceSymbol(_currentPair);
            textBlockLastPrice.Text = LastPrice.ToString();
            _orderBook.Aggregate(_priceDecimals, _qtyDecimals);
            GridStyleSetup();
            RefreshGridColumnWidths();
        }

        private bool _setUp = false;

        private void GridStyleSetup()
        {
            if (_setUp)
                return;
            if (_orderBook.Aggregate(4, 2))
                _setUp = true;
            //Set up dataGrids
            dataGridAsks.ItemsSource = Core.Kucoin.MainOrderBook.Asks;
            dataGridBids.ItemsSource = Core.Kucoin.MainOrderBook.Bids;

            Style s = new Style();
            s.Setters.Add(new Setter(TextBox.TextAlignmentProperty, TextAlignment.Right));

            Style sg = new Style();
            sg.Setters.Add(new Setter(TextBox.ForegroundProperty, Brushes.MediumSeaGreen));//new BrushConverter().ConvertFromString("#FF6BC7C2")));
            //sg.Setters.Add(new Setter(TextBox.TextAlignmentProperty, TextAlignment.Right));

            Style sr = new Style();
            sr.Setters.Add(new Setter(TextBox.ForegroundProperty, Brushes.IndianRed));//new BrushConverter().ConvertFromString("#FFFF907C")));

            //dataGridBids.Columns[0].DisplayIndex = 2;
            //dataGridBids.Columns[2].DisplayIndex = 0;

            dataGridBids.Columns[1].CellStyle = s;
            dataGridBids.Columns[2].CellStyle = s;
            dataGridBids.Columns[0].CellStyle = sg;

            dataGridAsks.Columns[1].CellStyle = s;
            dataGridAsks.Columns[2].CellStyle = s;
            dataGridAsks.Columns[0].CellStyle = sr;

            
            _setUp = true;
        }
        
        private void DataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            DataGridTextColumn col = e.Column as DataGridTextColumn;

            string numPrice = "";
            for (int i = 0; i < PriceDecimals; i++)
                numPrice += "#";

            string numQty = "";
            for (int i = 0; i < QtyDecimals; i++)
                numQty += "0";

            if (col != null && e.PropertyType == typeof(decimal) || e.PropertyType == typeof(double))
            {
                if (e.PropertyName == "Price")
                {
                    var format = "{0:#,0." + numPrice + "}";
                    col.Binding = GetBinding(e.PropertyName, format);
                        //new Binding(e.PropertyName)
                        //{ StringFormat = "{0:#,0." + numPrice + "}" };
                }
                else
                {
                    var format = "{0:#,0." + numQty + "}";
                    col.Binding = GetBinding(e.PropertyName, format);
                        //new Binding(e.PropertyName)
                        //{ StringFormat = "{0:#,0." + numQty + "}" };
                }
                 //"N"+(e.PropertyName=="Price" ? PriceDecimals:QtyDecimals )};
                //col.Binding = GetBinding(col,e.PropertyName,(e.PropertyName == "Price" ? PriceDecimals : QtyDecimals));
            }
        }
        
        private void RefreshGridColumnWidths()
        {
            dataGridBids.Columns[0].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            dataGridAsks.Columns[0].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);

            dataGridAsks.Columns[1].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            dataGridAsks.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            dataGridBids.Columns[1].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            dataGridBids.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Star);

            
        }

        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
